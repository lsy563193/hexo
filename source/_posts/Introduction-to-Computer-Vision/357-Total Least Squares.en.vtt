WEBVTT
Kind: captions
Language: en

00:00:00.067 --> 00:00:02.770
There's actually sort of a problem with vertical least squares.

00:00:02.770 --> 00:00:05.677
And the reason I called it vertical least squares is

00:00:05.677 --> 00:00:09.943
we're actually minimizing the error in a particular direction, right?

00:00:09.943 --> 00:00:11.612
Vertically, with the y.

00:00:11.612 --> 00:00:14.215
So for example, that's not even rotation in variance.

00:00:14.215 --> 00:00:17.955
So if I get lines that are kind of horizontal, that works okay because,

00:00:17.955 --> 00:00:19.320
you know, the points.

00:00:19.320 --> 00:00:24.362
But I got lines that are very steep, then as I move off the line a little bit,

00:00:24.362 --> 00:00:27.995
I end up with this huge error, which is not really right.

00:00:27.995 --> 00:00:30.233
I just moved off the line a little bit.

00:00:30.233 --> 00:00:32.833
And that's because I'm using this particular direction.

00:00:32.833 --> 00:00:36.170
And of course, it fails totally for vertical lines.

00:00:36.170 --> 00:00:39.638
So it's really not a good model, it's not a good noise model for

00:00:39.638 --> 00:00:40.741
what we're doing.

00:00:40.741 --> 00:00:43.477
So let's develop a slightly better model.

00:00:43.477 --> 00:00:46.347
We're going to refer to this as total least squares and

00:00:46.347 --> 00:00:48.315
this you've, you've also seen.

00:00:48.315 --> 00:00:54.493
So now what we want to do is we want to minimize the distance between the point

00:00:54.493 --> 00:01:00.594
xi, y and some line ax plus by equals d, where a and b are this unit normal.

00:01:00.594 --> 00:01:04.397
Right? So, it's actually the unit normal in the direction towards the line.

00:01:04.397 --> 00:01:09.091
So when you take the dot product of the point, xi, yi and a, b,

00:01:09.091 --> 00:01:11.405
that would give you this here.

00:01:11.405 --> 00:01:11.906
Okay?

00:01:11.906 --> 00:01:13.457
That should equal d,

00:01:13.457 --> 00:01:17.945
which is the distance of the point, of the origin to the line.

00:01:17.945 --> 00:01:20.081
That's this distance here, as it's drawn there.

00:01:20.081 --> 00:01:25.159
And it, to the extent to which that point does not lie on that line,

00:01:25.159 --> 00:01:30.591
that perpendicular distance, as drawn here is just ax plus by minus d.

00:01:30.591 --> 00:01:32.367
Right? It's supposed to equal these, so

00:01:32.367 --> 00:01:36.130
if you subtract d, that's the dot product and that's the perpendicular distance.

00:01:36.130 --> 00:01:37.331
At the end of the day, what that does?

00:01:37.331 --> 00:01:40.234
Is this gives us this new error function, E.

00:01:40.234 --> 00:01:41.368
Pretty straight-forward.

00:01:41.368 --> 00:01:45.414
And what we're going to do is we're minimize that error function now instead of

00:01:45.414 --> 00:01:47.041
our previous error function.

00:01:47.041 --> 00:01:47.608
How do we do that?

00:01:47.608 --> 00:01:49.211
Pretty straightforward.

00:01:49.211 --> 00:01:50.578
Same thing, we start with out E.

00:01:50.578 --> 00:01:51.382
All right?

00:01:51.382 --> 00:01:53.080
We're minim, doing a minimization.

00:01:53.080 --> 00:01:55.734
We take the derivative with respect to the parameter d,

00:01:55.734 --> 00:01:57.718
that's the first one we're going to do.

00:01:57.718 --> 00:02:00.421
That generates this equation for us.

00:02:00.421 --> 00:02:06.811
We can use that to solve for d and d is just this beautiful ax bar,

00:02:06.811 --> 00:02:10.865
x bar is the average of the x's plus by bar.

00:02:10.865 --> 00:02:12.466
That's, that's what these terms here are.

00:02:12.466 --> 00:02:18.172
Okay. So this, now I've got an expression for d in terms of a and b.

00:02:18.172 --> 00:02:20.264
So I can substitute that back in and

00:02:20.264 --> 00:02:24.747
I get this kind of ugly expression that we'll make beautiful in a minute.

00:02:24.747 --> 00:02:29.116
So I've now plug these in, so there's no more ds in there and look at that.

00:02:29.116 --> 00:02:32.977
That now looks very similar to the expression we had before,

00:02:32.977 --> 00:02:36.924
except now we've got this these means subtracted.

00:02:36.924 --> 00:02:43.264
So if I stack up all my x's, x minus x bars here and y's minus y bar there.

00:02:43.264 --> 00:02:48.237
And I'm actually going to call that matrix U because I do.

00:02:48.237 --> 00:02:51.326
I can write this whole thing as

00:02:51.326 --> 00:02:56.710
Transpose Where h now is just this parameter a, b.

00:02:56.710 --> 00:02:57.778
Remember, we got rid of d.

00:02:57.778 --> 00:03:02.049
We solved for d in terms of a, b and now we just have to solve for a and b.

00:03:02.049 --> 00:03:06.552
Okay. So now that we have an expression for E in terms of U, which is a,

00:03:06.552 --> 00:03:11.292
which are known from the x's and y's and h which is our parameter vector.

00:03:11.292 --> 00:03:12.893
In order to solve for h, what do we do?

00:03:12.893 --> 00:03:16.297
Same thing, we take the derivative of E with respect to h.

00:03:16.297 --> 00:03:19.372
Repeat that equation, set that equal to zero and

00:03:19.372 --> 00:03:23.504
that should start to look vaguely annoyingly familiar, right?

00:03:23.504 --> 00:03:26.782
We have this matrix here, U transpose U,

00:03:26.782 --> 00:03:30.901
which is just made up of the x minus x bars stacked up,

00:03:30.901 --> 00:03:37.384
y minus y bars stacked up, transpose whatever, times my parameter equals zero.

00:03:37.384 --> 00:03:39.119
Remember, what equations equal to zero are?

00:03:39.119 --> 00:03:41.255
Those were homogenous equations.

00:03:41.255 --> 00:03:41.889
Uh-huh.

00:03:41.889 --> 00:03:43.157
All right.

00:03:43.157 --> 00:03:47.461
So the solution to U transpose h equals zero.

00:03:47.461 --> 00:03:50.264
Well, the dumb solution is set h equal to zero.

00:03:50.264 --> 00:03:51.432
We said that wasn't going to work.

00:03:51.432 --> 00:03:54.505
Remember, when we did the essential matrix and when we did calibration and

00:03:54.505 --> 00:03:55.202
all that stuff.

00:03:55.202 --> 00:03:59.092
We said no, since we have everything okay up to the scale factor

00:03:59.092 --> 00:04:03.277
what we're going to do is we're going to set the magnitude of h equal to 1.

00:04:03.277 --> 00:04:07.127
Now in this particular case, we were going to do that eventually anyway,

00:04:07.127 --> 00:04:09.755
because you remember a and b, which was the h is here,

00:04:09.755 --> 00:04:12.854
where the components of the unit direction of that line.

00:04:12.854 --> 00:04:15.314
So a and b have to be a unit vector, so

00:04:15.314 --> 00:04:19.093
we might as well just set the magnitude of h equal to 1.

00:04:19.093 --> 00:04:21.394
And so remember, how you can solve that?

00:04:21.394 --> 00:04:26.428
You can do that whole SVD eigenvector thing again, so given you transpose U,

00:04:26.428 --> 00:04:30.456
you can find the eigenvector with the smallest eigenvalue and

00:04:30.456 --> 00:04:32.873
that's your solution to for h.

00:04:32.873 --> 00:04:37.246
I'm showing you this as a way of talking about that the right thing to do is

00:04:37.246 --> 00:04:38.979
perpendicularly squares.

00:04:38.979 --> 00:04:44.247
Here's how you do perpendicularly squares and now the question that you really

00:04:44.247 --> 00:04:49.290
should be asking is, why is perpendicularly squares the right thing to do?

00:04:49.290 --> 00:04:54.510
Well, it's because we have in mind a particular model of noise.

