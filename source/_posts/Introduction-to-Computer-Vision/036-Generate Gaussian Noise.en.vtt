WEBVTT
Kind: captions
Language: en

00:00:00.460 --> 00:00:04.320
So we know that randn generates Gaussian noise.

00:00:04.320 --> 00:00:06.910
Let's see how it actually works.

00:00:06.910 --> 00:00:11.136
If you call randn without any parameters, then it returns a random number.

00:00:11.136 --> 00:00:14.550
Here we get 0.76388.

00:00:14.550 --> 00:00:15.766
Run it again.

00:00:15.766 --> 00:00:20.490
A different number, 1.3958.

00:00:20.490 --> 00:00:24.370
You can pass in dimensions to randn to generate a vector or

00:00:24.370 --> 00:00:27.370
matrix filled with random numbers.

00:00:27.370 --> 00:00:31.760
Letâ€™s say we want a row vector of five columns.

00:00:31.760 --> 00:00:34.775
So one row, five columns.

00:00:34.775 --> 00:00:38.020
Each time we run this, we get different sets of numbers.

00:00:38.020 --> 00:00:39.200
As you might have guessed,

00:00:39.200 --> 00:00:43.310
we can generate a two dimensional matrix of random numbers as well.

00:00:43.310 --> 00:00:46.800
Say we want two rows and three columns.

00:00:46.800 --> 00:00:51.670
Since these are a bunch of random numbers, we call this noise.

00:00:51.670 --> 00:00:57.480
What is interesting is that randn draws these numbers from a Gaussian or

00:00:57.480 --> 00:01:00.210
a random normal distribution.

00:01:00.210 --> 00:01:01.540
Hence, the n in randn.

00:01:01.540 --> 00:01:07.051
A Gaussian distribution has a probability distribution function that

00:01:07.051 --> 00:01:08.438
looks like this.

00:01:08.438 --> 00:01:12.078
The center, or mean, for randn is zero, and the standard deviation is one.

00:01:12.078 --> 00:01:19.930
The standard deviation is a measure of how spread out the distribution is.

00:01:19.930 --> 00:01:22.740
I mentioned this is a probability distribution,

00:01:22.740 --> 00:01:27.370
which means getting back numbers that are close to zero is highly likely,

00:01:27.370 --> 00:01:31.860
whereas numbers far away from zero are less likely.

00:01:31.860 --> 00:01:32.600
How do we do know for

00:01:32.600 --> 00:01:37.110
sure that randn is actually sampling from a Gaussian distribution?

00:01:37.110 --> 00:01:39.290
Well, if we had enough samples and

00:01:39.290 --> 00:01:44.700
distributed them among bins and we counted how many numbers landed in each bin,

00:01:44.700 --> 00:01:49.040
then we would see a pattern similar to the probability distribution function.

00:01:49.040 --> 00:01:49.660
Let's try that.

00:01:50.740 --> 00:01:53.780
How about we start with a vector of hundred numbers?

00:01:53.780 --> 00:01:58.050
Instead of displaying the numbers directly, let's compute a histogram.

00:01:58.050 --> 00:02:03.210
Hist accepts a vector or matrix of numbers as a first argument and

00:02:03.210 --> 00:02:07.970
as an optional second argument, you can pass in bin centers.

00:02:07.970 --> 00:02:13.000
Let's say we want the centers to be integers, from minus three to plus three.

00:02:13.000 --> 00:02:14.870
Hist returns two values.

00:02:14.870 --> 00:02:20.500
One is the count of elements, which we want, and the second is the bin centers.

00:02:20.500 --> 00:02:25.050
Let us display the bin centers and the columns in a tabular form.

00:02:25.050 --> 00:02:27.790
We will create a small, temporary matrix,

00:02:27.790 --> 00:02:32.390
with the first row being the bin centers and the second row being the counts.

00:02:35.830 --> 00:02:40.040
As expected, the center has a high count, and the ends have low,

00:02:40.040 --> 00:02:42.550
in fact, zero counts.

00:02:42.550 --> 00:02:45.206
You see the same behavior no matter how many times you run it.

00:02:46.910 --> 00:02:52.285
For a visual representation of what's going on, how about we plot these numbers?

00:02:52.285 --> 00:02:57.365
X-axis will contain our bin centers, and the counts will be on the y-axis.

00:02:58.520 --> 00:03:02.169
We see something that vaguely resembles the Gaussian probability distribution.

00:03:03.590 --> 00:03:07.090
To get a better picture, we need more bins.

00:03:07.090 --> 00:03:11.460
You can generate a sequence of uniformly spaced numbers using the lint

00:03:11.460 --> 00:03:12.890
space function.

00:03:12.890 --> 00:03:17.481
Here we can replace this vector by writing minus three to plus three,

00:03:17.481 --> 00:03:19.620
seven different numbers.

00:03:19.620 --> 00:03:21.630
That is including zero.

00:03:21.630 --> 00:03:24.250
Let's make sure this is the same as before.

00:03:24.250 --> 00:03:27.540
Note here that the bin centers are same, as expected.

00:03:27.540 --> 00:03:30.330
Now we can easily increase the number of events.

00:03:30.330 --> 00:03:31.710
Say, we want 21 one of them.

00:03:32.760 --> 00:03:36.720
I'm going for odd numbers because I want to include the zero in the middle.

00:03:36.720 --> 00:03:39.300
Displaying so many numbers wouldn't be useful, so

00:03:39.300 --> 00:03:42.830
let's comment that out and see what the plot looks like.

00:03:42.830 --> 00:03:46.350
Clearly, we have better resolution along the x-axis, but

00:03:46.350 --> 00:03:48.620
what's going on with these spikes?

00:03:48.620 --> 00:03:55.230
I think we need more data, let's bump up the vector to 1,000 numbers.

00:03:55.230 --> 00:03:58.010
Now you see the familiar bell curve slowly emerging.

00:03:59.090 --> 00:04:01.020
Let's increase the number of samples further.

00:04:02.280 --> 00:04:02.850
There you go.

00:04:04.810 --> 00:04:09.200
In addition to randn, you can find other random number generation functions in

00:04:09.200 --> 00:04:12.720
Octave or MATLAB such as just rand.

00:04:12.720 --> 00:04:15.339
This samples numbers from a uniform distribution.

00:04:16.570 --> 00:04:19.700
Randi generates random integers.

00:04:19.700 --> 00:04:21.579
Feel free to play with these functions.

