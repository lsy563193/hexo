WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:05.460
So we also have talked about projective transformations, and for, remember for

00:00:05.460 --> 00:00:09.820
3D, we said that we used 4D, four length vectors, and we had four by four.

00:00:09.820 --> 00:00:11.910
Well for 2D images,

00:00:11.910 --> 00:00:16.070
it's just a three by three matrix applied to a homogenous coordinates.

00:00:16.070 --> 00:00:20.180
So here I've written this as I have an original vector, xyw,

00:00:20.180 --> 00:00:22.310
w being the homogenous coordinate.

00:00:22.310 --> 00:00:26.250
I apply my three by three, I get a new x prime, y prime, w prime.

00:00:26.250 --> 00:00:28.540
And of course, to go to the nonhomogeneous,

00:00:28.540 --> 00:00:31.310
I have to divide through by the w prime later.

00:00:31.310 --> 00:00:33.010
So using this, sort of,

00:00:33.010 --> 00:00:36.130
general framework, we can look at all of the transformations.

00:00:36.130 --> 00:00:37.670
So let's go back to translations.

00:00:37.670 --> 00:00:42.480
So translation in this framework is just the identity matrix up here,

00:00:42.480 --> 00:00:45.260
the translation there, the 0, 0, 1 there.

00:00:45.260 --> 00:00:48.670
And we go from xy1 to x prime y prime 1,

00:00:48.670 --> 00:00:52.130
and in fact, we didn't have to do any division because we maintained that one.

00:00:52.130 --> 00:00:55.670
And that's drawn with this cool little picture here, where we're just take this

00:00:55.670 --> 00:01:00.240
square and we could just translate it around, nothing changes orientation size.

00:01:00.240 --> 00:01:04.160
And translation preserves the lengths and areas of, of objects.

00:01:04.160 --> 00:01:07.400
So as I move them around the angles stay the same.

00:01:07.400 --> 00:01:09.040
Even the orientation stays the same.

00:01:09.040 --> 00:01:14.900
And, because this is a, a projective transform, lines remain lines.

00:01:14.900 --> 00:01:17.890
And lines remaining lines is going to be key to everything we do for

00:01:17.890 --> 00:01:19.890
at least five lessons.

00:01:19.890 --> 00:01:21.580
Well, four or five lessons.

00:01:21.580 --> 00:01:24.000
All right, so that's translation.

00:01:24.000 --> 00:01:26.780
A rigid body transformation could be represented this way as well.

00:01:26.780 --> 00:01:28.850
It's called Euclidian or, or rigid body.

00:01:28.850 --> 00:01:32.290
And now instead of having just a pure identity matrix, we

00:01:32.290 --> 00:01:37.800
have this rotation matrix, so we can rotate in the plane and we can translate.

00:01:37.800 --> 00:01:40.720
So we have three degrees of freedom here.

00:01:40.720 --> 00:01:43.840
And again we've maintained a rigid body, so lengths and

00:01:43.840 --> 00:01:46.120
areas are all preserved, angles are preserved.

00:01:46.120 --> 00:01:50.500
Lines are preserves, but of course the location and the orientation can change.

00:01:50.500 --> 00:01:54.014
Another one which people don't think of quite as much is a sim,

00:01:54.014 --> 00:01:55.040
it's called a similarity transform.

00:01:55.040 --> 00:02:01.820
In a similarity transform we have translation, here,

00:02:01.820 --> 00:02:06.210
the rotation by the thetas, and you notice everything is scaled by a.

00:02:07.860 --> 00:02:08.508
Okay.

00:02:08.508 --> 00:02:10.470
So that's an expansion, that's a scale.

00:02:10.470 --> 00:02:12.780
So this translation, rotation, and scale.

00:02:12.780 --> 00:02:14.740
So how many degrees of freedom of that?

00:02:14.740 --> 00:02:15.280
four.

00:02:15.280 --> 00:02:15.840
Right?

00:02:15.840 --> 00:02:19.190
Two for translation, a rotation, and a scale.

00:02:19.190 --> 00:02:23.880
Now, one that we use actually a modest amount in computer vision is what's

00:02:23.880 --> 00:02:26.440
referred to as an affine transform.

00:02:26.440 --> 00:02:29.560
Okay, and in an affine transform you'll see that

00:02:29.560 --> 00:02:32.340
we have six degrees of freedom here.

00:02:32.340 --> 00:02:34.250
And I've just written them as a linear transformation.

00:02:34.250 --> 00:02:35.380
A, b, c, d, e, f, okay?

00:02:37.380 --> 00:02:40.270
And again, we go from xy1 to x prime y prime 1.

00:02:40.270 --> 00:02:44.620
And what an affine transformation can do is essentially map.

00:02:44.620 --> 00:02:45.960
And we'll look at this later.

00:02:45.960 --> 00:02:50.480
Any three points to any other three points, all right?

00:02:50.480 --> 00:02:53.850
And what you do is you're, you're essentially now being able to translate,

00:02:53.850 --> 00:02:57.200
rotate, scale, and skew the image.

00:02:57.200 --> 00:02:58.860
And there's skew in both directions.

00:02:58.860 --> 00:03:01.740
So there's six degrees of, of freedom.

00:03:01.740 --> 00:03:03.710
You still maintain parallel lines.

00:03:03.710 --> 00:03:08.720
So the edges of the, this square becoming edges of a parallelogram.

00:03:08.720 --> 00:03:09.450
Okay.

00:03:09.450 --> 00:03:13.130
And ratios of areas remain the same.

00:03:13.130 --> 00:03:17.890
So if I had one area here that was half the size of the area to the left,

00:03:17.890 --> 00:03:21.130
then its transformation would be half the size over here.

00:03:21.130 --> 00:03:24.150
But the area itself can change right through scaling.

00:03:24.150 --> 00:03:27.130
All right. And again lines are mapped to lines.

00:03:27.130 --> 00:03:30.640
Notice that we don't have to do the division still.

