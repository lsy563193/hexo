WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:02.350
To conclude this lesson,

00:00:02.350 --> 00:00:05.470
I want to talk about a couple of extensions to the Hough transform.

00:00:05.470 --> 00:00:08.109
And then some of these extensions are going to carry over,

00:00:08.109 --> 00:00:10.610
both to the next lesson and the one after.

00:00:10.610 --> 00:00:14.890
By far, sort of the extension that people leverage the most is the one

00:00:14.890 --> 00:00:17.180
shown here using the gradient.

00:00:17.180 --> 00:00:20.330
You'll notice that our algorithm is almost exactly the same.

00:00:21.530 --> 00:00:24.960
We initialize our accumulator array.

00:00:24.960 --> 00:00:30.630
We iterate over each point, but now instead of looping or

00:00:30.630 --> 00:00:35.760
iterating over all possible orientations, we actually take

00:00:35.760 --> 00:00:40.070
the gradient at that point, and we take theta from that gradient.

00:00:40.070 --> 00:00:43.720
Now you could take a single theta, or you might even take a range of thetas,

00:00:43.720 --> 00:00:45.480
where you say, well, I know that it's,

00:00:45.480 --> 00:00:49.710
you know, approximately 45 degrees plus or minus 10, so I'll vote for

00:00:49.710 --> 00:00:54.030
minus 35 to 55, but I don't have to worry about voting for all the others.

00:00:54.030 --> 00:00:57.330
I've written it here as if you've got a single value.

00:00:57.330 --> 00:01:00.780
Now that you have theta, you can solve your equation directly,

00:01:00.780 --> 00:01:05.170
just as we did before, and we increment our accumulator array.

00:01:05.170 --> 00:01:08.920
The nice thing is, is that by using the gradient,

00:01:08.920 --> 00:01:12.490
you've reduced the voting time hugely, right?

00:01:12.490 --> 00:01:14.760
You don't have to worry, you just have a single point.

00:01:14.760 --> 00:01:17.570
Also, later, you can use it to reduce the dimensionality.

00:01:17.570 --> 00:01:20.990
So this is the extension that people make use of the most.

00:01:20.990 --> 00:01:23.940
In fact, the whole notion of orientation is something we'll talk about more

00:01:23.940 --> 00:01:25.100
going forward.

00:01:25.100 --> 00:01:26.770
A few other extensions.

00:01:26.770 --> 00:01:29.630
One is well, remember when we were doing edge detection,

00:01:29.630 --> 00:01:33.310
we said that some edges had stronger magnitude than others.

00:01:33.310 --> 00:01:35.180
And you have to set a threshold.

00:01:35.180 --> 00:01:38.460
Well, you might lower that threshold a bit to try to get more edges.

00:01:38.460 --> 00:01:41.610
But the idea is you might want to count the edges with a higher threshold more.

00:01:41.610 --> 00:01:43.990
Well, what would it mean to count them more?

00:01:43.990 --> 00:01:47.370
Well, you could imagine that stronger edges would get more votes.

00:01:47.370 --> 00:01:50.640
Another extension, and this is similar to what I was talking about before is,

00:01:50.640 --> 00:01:55.510
is playing with or changing the bin size of theta and d.

00:01:55.510 --> 00:02:00.570
As we said before, big bins make it easy to, first of all, vote, it's fast.

00:02:00.570 --> 00:02:05.460
But you sometimes can get similar lines landing in the same bin.

00:02:05.460 --> 00:02:08.820
To find a bin, and you have this problem that the real line because of

00:02:08.820 --> 00:02:13.860
noise votes for different bins, so extension is to do this hierarchically.

00:02:13.860 --> 00:02:16.190
First, do a coarse binning where you,

00:02:16.190 --> 00:02:20.310
you, have sort of larger bins, bins that capture more values.

00:02:20.310 --> 00:02:25.700
Once you find peaks there, you then go to finer arrays just within those areas,

00:02:25.700 --> 00:02:28.580
and you, you improve your recovering of the model.

00:02:29.620 --> 00:02:31.830
And finally, it's not just an extension, but

00:02:31.830 --> 00:02:33.340
it's a whole new way of doing things.

00:02:33.340 --> 00:02:36.360
We did this for lines, but you can do this easily.

00:02:36.360 --> 00:02:37.530
I shouldn't say easily.

00:02:37.530 --> 00:02:39.750
You can do this pretty straightforwardly for

00:02:39.750 --> 00:02:43.080
other parameterized types of shapes like circles, which,

00:02:43.080 --> 00:02:46.240
in fact, we will be doing in a little bit, oh, and you'll be doing as well.

00:02:46.240 --> 00:02:47.380
Or actually,

00:02:47.380 --> 00:02:51.060
any other shape including shapes that are defined by their templates.

