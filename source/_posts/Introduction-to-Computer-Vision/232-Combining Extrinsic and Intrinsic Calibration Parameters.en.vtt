WEBVTT
Kind: captions
Language: en

00:00:00.400 --> 00:00:03.190
So now we found the intrinsic matrix.

00:00:03.190 --> 00:00:05.790
And last time we found the extrinsic matrix.

00:00:05.790 --> 00:00:11.030
So now we can combine them to get the total camera calibration that goes

00:00:11.030 --> 00:00:16.309
from a world point all the way through the camera coordinate to the image.

00:00:16.309 --> 00:00:18.980
So we write down our two equations here.

00:00:18.980 --> 00:00:20.290
We have our intrinsic,

00:00:20.290 --> 00:00:24.600
p prime is equal to K times the point in the camera frame.

00:00:24.600 --> 00:00:29.370
And our extrinsic which relates the world point, to the camera point.

00:00:29.370 --> 00:00:33.310
P in w is the world three dimensional coordinates transformed by

00:00:33.310 --> 00:00:37.530
the extrinsic matrix, becomes the camera three dimensional coordinates,

00:00:37.530 --> 00:00:40.650
which is used also in the intrinsic equation.

00:00:40.650 --> 00:00:43.560
And then that's converted to pixels directly.

00:00:43.560 --> 00:00:47.500
One thing to note here, is that our world coordinate system, is a four vector,

00:00:47.500 --> 00:00:48.640
it's a homogeneous.

00:00:48.640 --> 00:00:52.660
And we get out of four vector, but as we said before, for our K,

00:00:52.660 --> 00:00:55.490
instead of using the three by four, we can use the three by three,

00:00:55.490 --> 00:01:00.770
in which case we just use the x, y, z of the point in the 3D camera space.

00:01:00.770 --> 00:01:02.940
We don't have to use the whole x, y, z, 1.

00:01:02.940 --> 00:01:07.250
That's basically saying that this K can be thought of as a three by four or

00:01:07.250 --> 00:01:08.330
a three by three.

00:01:08.330 --> 00:01:13.190
And when it's a three by three we don't have to have that 1 on the bottom there.

00:01:13.190 --> 00:01:15.350
So, putting these two equations together,

00:01:15.350 --> 00:01:19.470
what we have is we take a world point here, we pump it through our extrinsic.

00:01:19.470 --> 00:01:22.670
So, this is a three by four matrix, okay,

00:01:22.670 --> 00:01:25.090
which gets us out of three dimensional vector.

00:01:25.090 --> 00:01:29.580
And then we pump that through our intrinsic matrix, and

00:01:29.580 --> 00:01:33.920
that get us our homogeneous image coordinates.

00:01:33.920 --> 00:01:35.150
So this is a three vector.

00:01:35.150 --> 00:01:39.310
Remember we said it was z times u, z times v.

00:01:39.310 --> 00:01:39.850
Look at that.

00:01:39.850 --> 00:01:41.190
My us and vs look the same.

00:01:41.190 --> 00:01:43.780
Divided, and z, and then we convert it back.

00:01:43.780 --> 00:01:50.000
And so this whole thing can be written as a single matrix M.

00:01:50.000 --> 00:01:53.270
M for calibration in some language.

00:01:53.270 --> 00:01:55.330
I have no idea why it's called M, but we call it M.

