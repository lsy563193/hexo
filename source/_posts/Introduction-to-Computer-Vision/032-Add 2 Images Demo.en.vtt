WEBVTT
Kind: captions
Language: en

00:00:00.790 --> 00:00:04.689
So what do arithmetic operations on images look like?

00:00:04.689 --> 00:00:06.670
Let's start by adding two images.

00:00:07.980 --> 00:00:10.890
Like before, we load up the images.

00:00:10.890 --> 00:00:15.140
Let's display them and make sure their sizes are equal.

00:00:15.140 --> 00:00:19.520
Here are the images, and as we can see in the program output,

00:00:19.520 --> 00:00:21.570
their sizes are equal.

00:00:21.570 --> 00:00:26.220
This is important because addition is an element by element operation.

00:00:26.220 --> 00:00:30.990
This means pixels in one image get added with corresponding pixels in

00:00:30.990 --> 00:00:33.690
the other image, and so on.

00:00:33.690 --> 00:00:37.200
Since the two images are of the same size, we can add them.

00:00:37.200 --> 00:00:40.760
Octave is intelligent enough to figure out that these two are matrices of

00:00:40.760 --> 00:00:45.630
the same size and hence performs an element-wise addition.

00:00:45.630 --> 00:00:46.740
The result is,

00:00:46.740 --> 00:00:51.760
as you would expect, an image that has elements of both source images.

00:00:51.760 --> 00:00:54.940
You can clearly see the bicycle and the white surf.

00:00:54.940 --> 00:00:58.260
You can also see the dolphin faintly visible.

00:00:58.260 --> 00:01:01.320
Notice how this image is exceptionally bright.

00:01:01.320 --> 00:01:03.660
Many areas are washed out.

00:01:03.660 --> 00:01:05.970
Why do you think the image is so bright?

00:01:05.970 --> 00:01:08.930
To find out, let's look back at our code.

00:01:08.930 --> 00:01:12.530
Note that we're directly adding values from both images.

00:01:12.530 --> 00:01:16.760
Areas where both images are bright turn out to be doubly bright.

00:01:16.760 --> 00:01:21.450
This indicates that we should perhaps scale down the image intensity values.

00:01:21.450 --> 00:01:22.225
By how much?

00:01:22.225 --> 00:01:24.620
We'll think of a pixel,

00:01:24.620 --> 00:01:28.660
where both these images have the maximum intensity value.

00:01:28.660 --> 00:01:32.398
That pixel in the summed image will have twice the maximum value.

00:01:32.398 --> 00:01:37.560
So if we want the maximum possible value in the summed image to be

00:01:37.560 --> 00:01:43.010
the same as the maximum possible value in each of these source images,

00:01:43.010 --> 00:01:47.240
then we want to divide the intensities by 2.

00:01:47.240 --> 00:01:48.430
Does this look familiar?

00:01:49.620 --> 00:01:52.980
Yes, this is the average of the two images.

00:01:52.980 --> 00:01:54.240
Let's see what this looks like.

00:01:55.870 --> 00:01:57.120
All right, much better.

00:01:58.720 --> 00:02:00.260
Compare this with the direct sum.

00:02:01.880 --> 00:02:05.010
You can clearly see the difference in brightness.

00:02:05.010 --> 00:02:09.220
Also notice that there are no longer any washed out areas.

00:02:10.220 --> 00:02:13.339
Let's rewrite the expression for average and see what happens.

00:02:14.830 --> 00:02:18.460
Since both bicycle and dolphin are being divided by 2,

00:02:18.460 --> 00:02:24.080
we should be able to add them first and divide the result by 2, right?

00:02:24.080 --> 00:02:27.320
And let's call it average_alt.

00:02:27.320 --> 00:02:28.500
Let's see what this looks like.

00:02:29.940 --> 00:02:32.360
Wait a second, this is not right.

00:02:32.360 --> 00:02:34.000
Shouldn't the two results be the same?

