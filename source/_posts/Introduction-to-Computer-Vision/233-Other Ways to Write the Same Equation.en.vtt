WEBVTT
Kind: captions
Language: en

00:00:00.012 --> 00:00:04.030
Just want to write that, M in a slightly different way, because it's the way

00:00:04.030 --> 00:00:06.900
that we're actually going to make use of when we solve for this thing.

00:00:06.900 --> 00:00:09.980
So, here we have the same equations written out.

00:00:09.980 --> 00:00:12.570
You see, we have the world coordinates mapped through M,

00:00:12.570 --> 00:00:15.410
gives us the homogenous pixel coordinates.

00:00:15.410 --> 00:00:17.450
And what I've done, written here is,

00:00:17.450 --> 00:00:21.780
I've taken this M matrix, which, remember, is a three by four.

00:00:21.780 --> 00:00:25.660
And I said that you can think of it as three vectors each of

00:00:25.660 --> 00:00:31.130
length four transposed as the rows, so each of these rows is a vector.

00:00:31.130 --> 00:00:32.880
I've also introduced something new here,

00:00:32.880 --> 00:00:34.820
I don't think I've showed it on this slide before.

00:00:34.820 --> 00:00:37.205
Remember, this is what we said before, okay?

00:00:37.205 --> 00:00:40.930
I'm, I'm using s as a scale, instead of z, right, and so

00:00:40.930 --> 00:00:43.177
we have s times u, s times v, and s.

00:00:43.177 --> 00:00:47.900
And later to get out u and v, we just just divide by s.

00:00:47.900 --> 00:00:51.083
And I've put this little operator here, but it's just a squiggle with

00:00:51.083 --> 00:00:54.388
a straight line underneath, sometimes two straight lines underneath.

00:00:54.388 --> 00:00:57.740
And it's what's known as projectively similar.

00:00:57.740 --> 00:01:00.181
So you'll notice that this vector and

00:01:00.181 --> 00:01:04.766
this vector are exactly the same except for a scale factor, all right.

00:01:04.766 --> 00:01:09.510
The vector on the left multiplied by s, gives you the vector on the right.

00:01:09.510 --> 00:01:13.240
And remember, in homogeneous coordinates or using the projective,

00:01:13.240 --> 00:01:16.630
those two vectors are essentially the same, because when I use their values,

00:01:16.630 --> 00:01:19.630
I divide out by the left, by the last, component.

00:01:19.630 --> 00:01:23.260
So, that's what's referred to as projectively similar, so

00:01:23.260 --> 00:01:25.430
that's also introduced here.

00:01:25.430 --> 00:01:30.384
So, just finishing, the way I recover u and v is, I divide the dot product,

00:01:30.384 --> 00:01:34.641
the dot of the vector of the point p in the world with the first row,

00:01:34.641 --> 00:01:39.700
divided by that dot product with the third row, that's what's right here.

00:01:39.700 --> 00:01:42.426
And then to get the v value, I do the same thing, but

00:01:42.426 --> 00:01:44.406
now with the second row, all right.

00:01:44.406 --> 00:01:48.335
So basically, what we have to find, when we're going to find,

00:01:48.335 --> 00:01:53.490
when we're going to do camera calibration, is, we have to find those m elements.

